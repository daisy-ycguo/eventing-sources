/*
Copyright 2018 The Knative Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/knative/eventing-sources/pkg/apis/sources/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CloudEventsIngressSourceLister helps list CloudEventsIngressSources.
type CloudEventsIngressSourceLister interface {
	// List lists all CloudEventsIngressSources in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.CloudEventsIngressSource, err error)
	// CloudEventsIngressSources returns an object that can list and get CloudEventsIngressSources.
	CloudEventsIngressSources(namespace string) CloudEventsIngressSourceNamespaceLister
	CloudEventsIngressSourceListerExpansion
}

// cloudEventsIngressSourceLister implements the CloudEventsIngressSourceLister interface.
type cloudEventsIngressSourceLister struct {
	indexer cache.Indexer
}

// NewCloudEventsIngressSourceLister returns a new CloudEventsIngressSourceLister.
func NewCloudEventsIngressSourceLister(indexer cache.Indexer) CloudEventsIngressSourceLister {
	return &cloudEventsIngressSourceLister{indexer: indexer}
}

// List lists all CloudEventsIngressSources in the indexer.
func (s *cloudEventsIngressSourceLister) List(selector labels.Selector) (ret []*v1alpha1.CloudEventsIngressSource, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CloudEventsIngressSource))
	})
	return ret, err
}

// CloudEventsIngressSources returns an object that can list and get CloudEventsIngressSources.
func (s *cloudEventsIngressSourceLister) CloudEventsIngressSources(namespace string) CloudEventsIngressSourceNamespaceLister {
	return cloudEventsIngressSourceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CloudEventsIngressSourceNamespaceLister helps list and get CloudEventsIngressSources.
type CloudEventsIngressSourceNamespaceLister interface {
	// List lists all CloudEventsIngressSources in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.CloudEventsIngressSource, err error)
	// Get retrieves the CloudEventsIngressSource from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.CloudEventsIngressSource, error)
	CloudEventsIngressSourceNamespaceListerExpansion
}

// cloudEventsIngressSourceNamespaceLister implements the CloudEventsIngressSourceNamespaceLister
// interface.
type cloudEventsIngressSourceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all CloudEventsIngressSources in the indexer for a given namespace.
func (s cloudEventsIngressSourceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.CloudEventsIngressSource, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CloudEventsIngressSource))
	})
	return ret, err
}

// Get retrieves the CloudEventsIngressSource from the indexer for a given namespace and name.
func (s cloudEventsIngressSourceNamespaceLister) Get(name string) (*v1alpha1.CloudEventsIngressSource, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("cloudeventsingresssource"), name)
	}
	return obj.(*v1alpha1.CloudEventsIngressSource), nil
}
